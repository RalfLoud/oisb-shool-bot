const { Keyboard } = require("grammy");
const questions = require("../questions.json");

async function formFlow(conversation, ctx) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  const session = await conversation.external((ctx) => {
    ctx.session ??= {};
    ctx.session.step ??= 0;
    ctx.session.answers ??= {};
    return { ...ctx.session };
  });
  
  let step = session.step;
  let answers = session.answers;
  
  while (step < questions.length) {
    const q = questions[step];
    let keyboard = null;
    
    if (q.type === "buttons" && Array.isArray(q.options)) {
      const rows = [];
      for (let i = 0; i < q.options.length; i += 2) {
        rows.push(q.options.slice(i, i + 2));
      }
      if (step > 0) rows.push(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]);
      rows.push(["‚úÖ –ì–æ—Ç–æ–≤–æ"]);
      keyboard = new Keyboard(rows).resized();
    }
    
    await ctx.reply(
      `üß© –®–∞–≥ ${step + 1} –∏–∑ ${questions.length}\n<b>${escapeHTML(q.question)}</b>`,
      {
        parse_mode: "HTML",
        reply_markup: keyboard || { remove_keyboard: true },
      }
    );
    
    const res = await conversation.waitFor("message:text");
    const text = res.message.text.trim();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    if (text === "‚úÖ –ì–æ—Ç–æ–≤–æ") {
      await ctx.reply("üìù", {
        reply_markup: { remove_keyboard: true },
      });
      break;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞–∑–∞–¥"
    if (text === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" && step > 0) {
      step--;
      continue;
    }
    
    if (q.type === "buttons" && !q.options.includes(text)) {
      await res.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
      continue;
    }
    
    answers[q.key] = text;
    step++;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  await conversation.external((ctx) => {
    ctx.session.step = step < questions.length ? step : -1;
    ctx.session.answers = step < questions.length ? answers : {};
  });
  
  if (step < questions.length) {
    await ctx.reply("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ.");
  } else {
    let result = "<b>–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:</b>\n";
    for (const q of questions) {
      result += `\n<b>${escapeHTML(q.question)}</b>\n${answers[q.key] ?? "‚Äî"}\n`;
    }
    await ctx.reply(result, {
      parse_mode: "HTML",
      reply_markup: { remove_keyboard: true },
    });
  }
}

function escapeHTML(str) {
  return String(str)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

module.exports = { formFlow };