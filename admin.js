const { Keyboard } = require("grammy");
const fs = require("fs");
const path = require("path");
const { isAdmin } = require("./helpers/isAdmin");

const QUESTIONS_PATH = path.join(__dirname, "questions.json");

function loadQuestions() {
  return JSON.parse(fs.readFileSync(QUESTIONS_PATH, "utf-8"));
}

function saveQuestions(questions) {
  fs.writeFileSync(QUESTIONS_PATH, JSON.stringify(questions, null, 2), "utf-8");
}

function setupAdmin(bot) {
  bot.command("admin", async (ctx) => {
    if (!(await isAdmin(ctx))) return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.");
    ctx.session.adminStep = null;
    await ctx.reply("üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é:", {
      reply_markup: new Keyboard([
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"],
        ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["üîô –í—ã–π—Ç–∏"]
      ]).resized(),
    });
  });
  
  bot.hears(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"], async (ctx) => {
    if (!(await isAdmin(ctx))) return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.");
    const text = ctx.message.text;
    
    if (text === "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å") {
      ctx.session.adminStep = "add_question_text";
      return await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å:");
    }
    
    if (text === "‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å") {
      ctx.session.adminStep = "delete_question_index";
      return await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
    }
    
    if (text === "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å") {
      ctx.session.adminStep = "edit_question_index";
      return await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
    }
  });
  
  bot.hears("üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", async (ctx) => {
    const questions = loadQuestions();
    const list = questions.map((q, i) => `${i + 1}. ${q.question} (${q.type})`).join("\n");
    await ctx.reply("<b>–í–æ–ø—Ä–æ—Å—ã:</b>\n" + (list || "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."), { parse_mode: "HTML" });
  });
  
  bot.hears("üîô –í—ã–π—Ç–∏", async (ctx) => {
    ctx.session.adminStep = null;
    await ctx.reply("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞.", { reply_markup: { remove_keyboard: true } });
  });
  
  bot.on("message:text", async (ctx) => {
    const step = ctx.session.adminStep;
    if (!step || !(await isAdmin(ctx))) return;
    
    const text = ctx.message.text;
    
    if (step === "add_question_text") {
      ctx.session.newQuestion = { question: text };
      ctx.session.adminStep = "add_question_type";
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: 'text' –∏–ª–∏ 'buttons'");
    }
    
    if (step === "add_question_type") {
      if (!["text", "buttons"].includes(text)) return ctx.reply("–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'text' –∏–ª–∏ 'buttons'");
      ctx.session.newQuestion.type = text;
      
      if (text === "buttons") {
        ctx.session.adminStep = "add_question_options";
        return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
      } else {
        const questions = loadQuestions();
        questions.push(ctx.session.newQuestion);
        saveQuestions(questions);
        ctx.session.adminStep = null;
        return ctx.reply("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.");
      }
    }
    
    if (step === "add_question_options") {
      ctx.session.newQuestion.options = text.split(",").map((o) => o.trim());
      const questions = loadQuestions();
      questions.push(ctx.session.newQuestion);
      saveQuestions(questions);
      ctx.session.adminStep = null;
      return ctx.reply("‚úÖ –í–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω.");
    }
    
    if (step === "delete_question_index") {
      const index = parseInt(text) - 1;
      const questions = loadQuestions();
      if (isNaN(index) || index < 0 || index >= questions.length) return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.");
      questions.splice(index, 1);
      saveQuestions(questions);
      ctx.session.adminStep = null;
      return ctx.reply("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.");
    }
    
    if (step === "edit_question_index") {
      const index = parseInt(text) - 1;
      const questions = loadQuestions();
      if (isNaN(index) || index < 0 || index >= questions.length) return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.");
      ctx.session.editingIndex = index;
      ctx.session.adminStep = "edit_question_text";
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
    }
    
    if (step === "edit_question_text") {
      const questions = loadQuestions();
      const index = ctx.session.editingIndex;
      questions[index].question = text;
      ctx.session.adminStep = "edit_question_type";
      saveQuestions(questions);
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: 'text' –∏–ª–∏ 'buttons'");
    }
    
    if (step === "edit_question_type") {
      if (!["text", "buttons"].includes(text)) return ctx.reply("–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'text' –∏–ª–∏ 'buttons'");
      const questions = loadQuestions();
      const index = ctx.session.editingIndex;
      questions[index].type = text;
      
      if (text === "buttons") {
        ctx.session.adminStep = "edit_question_options";
        saveQuestions(questions);
        return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
      } else {
        delete questions[index].options;
        saveQuestions(questions);
        ctx.session.adminStep = null;
        return ctx.reply("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.");
      }
    }
    
    if (step === "edit_question_options") {
      const questions = loadQuestions();
      const index = ctx.session.editingIndex;
      questions[index].options = text.split(",").map((o) => o.trim());
      saveQuestions(questions);
      ctx.session.adminStep = null;
      return ctx.reply("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.");
    }
  });
}

module.exports = { setupAdmin };