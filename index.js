// index.js (updated - session logic largely unchanged)
const { Bot, session, MemorySessionStorage } = require("grammy");
require("dotenv").config();
const { conversations, createConversation } = require("@grammyjs/conversations");
const { setupAdmin } = require("./admin");
const { formFlow } = require("./conversations/formFlow");
const bot = new Bot(process.env.BOT_TOKEN);
const port = process.env.PORT || 4000
// Middleware —Å–µ—Å—Å–∏–∏ (RAM storage)

bot.use(session({
  initial: () => ({ step: -1, answers: {} }),  // –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
  storage: new MemorySessionStorage()          // —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
}));
// –ü–æ–¥–∫–ª—é—á–∞–µ–º conversations –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à—É –±–µ—Å–µ–¥—É

bot.use(conversations());
bot.use(createConversation(formFlow));
// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –Ω–∞—á–∞–ª–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã

bot.api.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É" },
  { command: "admin", description: "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" },
  { command: "whoami", description: "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID" }
]);


bot.command("start", async (ctx) => {
  if (ctx.session.step !== undefined && ctx.session.step >= 0) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    await ctx.reply(
      "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "continue_form" }],
            [{ text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data: "restart_form" }]
          ]
        }
      }
    );
  } else {
    // –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
    ctx.session.step = 0;
    ctx.session.answers = {};
    await ctx.reply("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É.");
    await ctx.conversation.enter("formFlow");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  if (action === "continue_form") {
    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
    await ctx.answerCallbackQuery();  // —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await ctx.reply("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å...");
    await ctx.conversation.enter("formFlow");
  } else if (action === "restart_form") {
    // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ
    await ctx.answerCallbackQuery();
    ctx.session.step = 0;
    ctx.session.answers = {};
    await ctx.reply("–ê–Ω–∫–µ—Ç–∞ –Ω–∞—á–∞—Ç–∞ –∑–∞–Ω–æ–≤–æ. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë —Å –Ω–∞—á–∞–ª–∞:");
    await ctx.conversation.enter("formFlow");
  }
});

bot.command("whoami", async (ctx) => {
  const user = ctx.from;
  await ctx.reply(`üßæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:
ID: <code>${user.id}</code>
–ò–º—è: ${user.first_name}
Username: @${user.username || "–Ω–µ—Ç"}
`, { parse_mode: "HTML" });
});

setupAdmin(bot);
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (long polling)
bot.start();