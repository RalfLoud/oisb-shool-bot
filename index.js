const { Bot, session, MemorySessionStorage } = require("grammy");
require("dotenv").config();
const { conversations, createConversation } = require("@grammyjs/conversations");
const { setupAdmin } = require("./admin");
const { formFlow } = require("./conversations/formFlow");

const bot = new Bot(process.env.BOT_TOKEN);
const port = process.env.PORT || 4000;

// Middleware —Å–µ—Å—Å–∏–∏ (RAM storage)
bot.use(session({
  initial: () => ({ step: -1, answers: {}, started: false }),  // –¥–æ–±–∞–≤–ª–µ–Ω —Ñ–ª–∞–≥ started
  storage: new MemorySessionStorage()
}));

// –ü–æ–¥–∫–ª—é—á–∞–µ–º conversations –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–µ—Å–µ–¥—É
bot.use(conversations());
bot.use(createConversation(formFlow));

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram
bot.api.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É" },
  { command: "anketa", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É" },
  { command: "admin", description: "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" },
  { command: "whoami", description: "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID" }
]);

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
function sendWelcome(ctx) {
  ctx.session.started = true;
  return ctx.reply(
    ` –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –®–∫–æ–ª—ã –°–∞–ø–µ—Ä–æ–≤ –ë–∞—Ç–∞–ª—å–æ–Ω–∞ –∏–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞–ª–∞ –î.–ú. –ö–∞—Ä–±—ã—à–µ–≤–∞, <b>${ctx.from.first_name}</b>!
–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É <b>/anketa</b>.
–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º —Ç—ã –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 —Ö—Ö—Ö —Ö—Ö—Ö —Ö—Ö —Ö—Ö –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä—É @–ö—É—Ä–∞—Ç–æ—Ä`,
    {
      parse_mode: "HTML",
      reply_markup: { remove_keyboard: true }
    }
  );
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
  if (!ctx.session.started) await sendWelcome(ctx);
  else await ctx.reply("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /anketa –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.");
});

// –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∫–µ—Ç—ã
bot.command("anketa", async (ctx) => {
  if (ctx.session.step !== undefined && ctx.session.step >= 0) {
    await ctx.reply(
      "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "continue_form" }],
            [{ text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data: "restart_form" }]
          ]
        }
      }
    );
  } else {
    ctx.session.step = 0;
    ctx.session.answers = {};
    await ctx.reply("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É.");
    await ctx.conversation.enter("formFlow");
  }
});

// –ö–Ω–æ–ø–∫–∏: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  await ctx.answerCallbackQuery();
  
  if (action === "continue_form") {
    await ctx.reply("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å...");
    await ctx.conversation.enter("formFlow");
  } else if (action === "restart_form") {
    ctx.session.step = 0;
    ctx.session.answers = {};
    await ctx.reply("–ê–Ω–∫–µ—Ç–∞ –Ω–∞—á–∞—Ç–∞ –∑–∞–Ω–æ–≤–æ. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë —Å –Ω–∞—á–∞–ª–∞:");
    await ctx.conversation.enter("formFlow");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /whoami
bot.command("whoami", async (ctx) => {
  const user = ctx.from;
  await ctx.reply(`üßæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:
ID: <code>${user.id}</code>
–ò–º—è: ${user.first_name}
Username: @${user.username || "–Ω–µ—Ç"}`, { parse_mode: "HTML" });
});
setupAdmin(bot);
// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –ª—é–±–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.on("message", async (ctx) => {
  if (!ctx.session.started) {
    await sendWelcome(ctx);
  }
});

// –ê–¥–º–∏–Ω–∫–∞


// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();